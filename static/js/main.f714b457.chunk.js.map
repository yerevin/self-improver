{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["convertHoursToHumanReadableFormatWithoutSeconds","hours","minutes","parseInt","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteActivities","window","confirm","setState","prevState","activities","addActivity","state","newActivityDescription","length","alert","newActivityTime","getTimeAvailable","concat","toConsumableArray","id","description","isDone","time","timeString","newActivityTimeString","deleteActivity","activity","filter","item","getActivitesTimeSum","hoursSum","forEach","sleepHours","getTimeUsed","getProgressBarStatus","handleNewActivityTime","value","parseTimeStringToHourFloat","happyNotes","localStorage","getItem","sadNotes","JSON","parse","that","setInterval","setItem","stringify","string","toLowerCase","includes","Number","split","_value$split","_value$split2","slicedToArray","firstString","secondString","formattedTime","getTimeFromStrings","_this2","progressBarValue","progressBarClassName","react_default","a","createElement","className","placeholder","onChange","event","target","type","style","marginRight","width","onKeyPress","e","key","onClick","marginLeft","marginBottom","marginTop","aria-valuenow","aria-valuemin","aria-valuemax","class","map","index","checked","defaultValue","changeHappyNotes","changeSadNotes","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f714b457.chunk.js","sourcesContent":["export const convertHoursToHumanReadableFormatWithoutSeconds = hours => {\r\n  let minutes = parseInt((hours * 60) % 60);\r\n  hours = parseInt(~~hours);\r\n\r\n  return hours + \"h \" + minutes + \"m \";\r\n};\r\n","import React, { Component } from \"react\";\n\nimport { convertHoursToHumanReadableFormatWithoutSeconds } from \"./utils\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sleepHours: 6,\n      newActivityTime: \"\",\n      newActivityTimeString: \"0h 0m\",\n      newActivityDescription: \"Your activity description...\",\n      happyNotes: localStorage.getItem(\"happyNotes\") || \"\",\n      sadNotes: localStorage.getItem(\"sadNotes\") || \"\",\n      activities: JSON.parse(localStorage.getItem(\"activities\")) || []\n    };\n  }\n  componentDidMount() {\n    const that = this;\n    setInterval(() => {\n      localStorage.setItem(\"activities\", JSON.stringify(that.state.activities));\n    }, 1000);\n  }\n  deleteActivities = () => {\n    const confirmed = window.confirm(`Are you sure to delete activity?`);\n    if (confirmed) {\n      this.setState(prevState => ({\n        activities: []\n      }));\n    }\n  };\n\n  addActivity = () => {\n    if (this.state.newActivityDescription.length === 0) {\n      return alert(\"Insert description first.\");\n    }\n    if (this.state.newActivityTime === 0) {\n      return alert(\"Insert time first in proper format.\");\n    }\n    if (this.getTimeAvailable() - this.state.newActivityTime < 0) {\n      return alert(\"You went over 24h time!\");\n    }\n    this.setState(prevState => ({\n      activities: [\n        ...prevState.activities,\n        {\n          id: prevState.activities.length,\n          description: prevState.newActivityDescription,\n          isDone: false,\n          time: this.state.newActivityTime,\n          timeString: convertHoursToHumanReadableFormatWithoutSeconds(this.state.newActivityTime)\n        }\n      ],\n      newActivityTimeString: \"0h 0m\"\n    }));\n  };\n  deleteActivity = activity => {\n    const confirmed = window.confirm(`Are you sure to delete activity?`);\n    if (confirmed) {\n      this.setState(prevState => ({\n        activities: prevState.activities.filter(item => item.id !== activity.id)\n      }));\n    }\n  };\n\n  getActivitesTimeSum = () => {\n    if (this.state.activities.length === 0) {\n      return 0;\n    }\n    let hoursSum = 0;\n    this.state.activities.forEach(item => {\n      hoursSum += item.time;\n    });\n    return hoursSum;\n  };\n\n  getTimeAvailable = () => {\n    return 24 - this.state.sleepHours - this.getActivitesTimeSum();\n  };\n\n  getTimeUsed = () => {\n    return this.state.sleepHours + this.getActivitesTimeSum();\n  };\n\n  getProgressBarStatus = () => {\n    return ~~((this.getTimeUsed() / 24) * 100);\n  };\n\n  getTimeFromStrings(string, hours, minutes) {\n    if (string) {\n      string = string.toLowerCase();\n      if (string.includes(\"h\")) {\n        hours = Number(string.split(\"h\")[0]);\n      }\n      if (string.includes(\"m\")) {\n        minutes = Number(string.split(\"m\")[0]);\n      }\n    }\n    return { hours, minutes };\n  }\n\n  parseTimeStringToHourFloat(value) {\n    let [firstString, secondString] = value.split(\" \");\n    let hours = 0;\n    let minutes = 0;\n    let formattedTime = { hours: 0, minutes: 0 };\n    formattedTime = this.getTimeFromStrings(firstString, hours, minutes);\n    hours = formattedTime.hours;\n    minutes = formattedTime.minutes;\n    formattedTime = this.getTimeFromStrings(secondString, hours, minutes);\n    hours = formattedTime.hours;\n    minutes = formattedTime.minutes;\n    return hours + minutes / 60;\n  }\n\n  handleNewActivityTime = value => {\n    this.setState({ newActivityTimeString: value });\n    this.setState({ newActivityTime: this.parseTimeStringToHourFloat(value) });\n  };\n\n  changeHappyNotes(value) {\n    this.setState({ happyNotes: value });\n    localStorage.setItem(\"happyNotes\", value);\n  }\n\n  changeSadNotes(value) {\n    this.setState({ sadNotes: value });\n    localStorage.setItem(\"sadNotes\", value);\n  }\n\n  render() {\n    const progressBarValue = this.getProgressBarStatus();\n    const progressBarClassName =\n      progressBarValue < 80 ? \"light-blue\" : progressBarValue < 95 ? \"progress-bar-warning\" : \"progress-bar-danger\";\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"col-md-8\">\n              <header>\n                <h1>Manage your day</h1>\n              </header>\n              <label>Your sleep hours</label>\n              <input\n                placeholder=\"Sleep hours\"\n                className=\"form-control input-sm\"\n                value={this.state.sleepHours}\n                onChange={event => this.setState({ sleepHours: event.target.value })}\n              />\n              <label>Add new activity</label>\n              <div className=\"flex-container\">\n                <input\n                  placeholder=\"Time to spent (0h 0m)\"\n                  type=\"text\"\n                  className=\"form-control input-sm text-right\"\n                  value={this.state.newActivityTimeString}\n                  style={{ marginRight: 5, width: \"75px\" }}\n                  onChange={event => this.handleNewActivityTime(event.target.value)}\n                />\n\n                <input\n                  placeholder=\"Your activity description...\"\n                  className=\"form-control input-sm\"\n                  style={{ marginRight: 5 }}\n                  value={this.state.newActivityDescription}\n                  onChange={event => this.setState({ newActivityDescription: event.target.value })}\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                      this.addActivity();\n                    }\n                  }}\n                />\n                <button\n                  className=\"btn btn-sm dark-blue pull-right\"\n                  onClick={this.addActivity}\n                  style={{ marginLeft: 5, marginBottom: 10 }}\n                >\n                  Add activity\n                </button>\n              </div>\n              <p>Available hours to use: {convertHoursToHumanReadableFormatWithoutSeconds(this.getTimeAvailable())}</p>\n              <div\n                style={{\n                  width: \"100%\",\n                  marginTop: 10\n                }}\n                className=\"progress\"\n              >\n                <div\n                  className={`progress-bar ${progressBarClassName}`}\n                  aria-valuenow={progressBarValue}\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  style={{\n                    width: `${progressBarValue}%`\n                  }}\n                >\n                  <span>{progressBarValue}% elapsed</span>\n                </div>\n              </div>\n              <div class=\"col-md-12 col-xs-12 no-pm\">\n                <h3 class=\"activities-title\">\n                  Activities ({this.state.activities.filter(item => item.isDone).length}/{this.state.activities.length})\n                </h3>\n                <button\n                  className=\"btn btn-sm btn-danger pull-right\"\n                  onClick={this.deleteActivities}\n                  style={{ marginLeft: 5, marginBottom: 10 }}\n                >\n                  Clear all activites\n                </button>\n              </div>\n              <ul className=\"list-group\">\n                {this.state.activities.map((item, index) => {\n                  return (\n                    <li key={index} className=\"list-group-item flex-container dark-bg\">\n                      <input\n                        className=\"activity-checkbox\"\n                        type=\"checkbox\"\n                        checked={item.isDone}\n                        style={{ marginRight: 5 }}\n                        onChange={e => {\n                          item.isDone = !item.isDone;\n                          this.setState({});\n                        }}\n                      />\n                      <input\n                        placeholder=\"Time\"\n                        className=\"form-control input-sm text-right\"\n                        value={item.timeString}\n                        style={{ marginRight: 5, width: \"75px\" }}\n                        onChange={e => {\n                          item.timeString = e.target.value;\n                          item.time = this.parseTimeStringToHourFloat(e.target.value);\n                          this.setState({});\n                        }}\n                      />\n                      <input\n                        placeholder=\"Description\"\n                        className=\"form-control input-sm\"\n                        defaultValue={item.description}\n                        style={{ marginRight: 5, width: \"100%\" }}\n                        onChange={e => {\n                          item.description = e.target.value;\n                          this.setState({});\n                        }}\n                      />\n                      <button className=\"btn btn-sm btn-danger pull-right\" onClick={() => this.deleteActivity(item)}>\n                        <i className=\"fa fa-trash\" />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <div className=\"col-md-4\">\n              <h3 class=\"notes-title\">Update these one at the end of your day to sum up your day</h3>\n              <div>\n                <label>\n                  Happy notes <span class=\"fa fa-smile-beam\" /> (describe here things that happened and made you happy)\n                </label>\n                <textarea\n                  placeholder=\"Happy notes\"\n                  className=\"form-control input-sm\"\n                  value={this.state.happyNotes}\n                  onChange={event => this.changeHappyNotes(event.target.value)}\n                />\n              </div>\n              <div>\n                <label>\n                  Sadness notes <span class=\"fa fa-frown\" /> (describe here things that happened and made you sad/angry)\n                </label>\n                <textarea\n                  placeholder=\"Sad notes\"\n                  className=\"form-control input-sm\"\n                  value={this.state.sadNotes}\n                  onChange={event => this.changeSadNotes(event.target.value)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.css\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}