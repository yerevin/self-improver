{"version":3,"sources":["utils.js","App.js","serviceWorker.js","index.js"],"names":["convertHoursToHumanReadableFormatWithoutSeconds","hours","minutes","parseInt","MILISECONDS_IN_HOUR","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","deleteActivities","window","confirm","setState","prevState","activities","handleNotifications","that","assertThisInitialized","Notification","requestPermission","result","displayMorningNotification","displayEveningNotification","setInterval","date","Date","getHours","nonPersistentNotification","alert","console","log","addActivity","state","newActivityDescription","length","newActivityTime","getTimeAvailable","concat","toConsumableArray","id","description","isDone","time","timeString","newActivityTimeString","deleteActivity","activity","filter","item","getActivitesTimeSum","hoursSum","forEach","sleepHours","getTimeUsed","getProgressBarStatus","handleNewActivityTime","value","parseTimeStringToHourFloat","Number","localStorage","getItem","isHappyWithDay","JSON","parse","happyDaysDates","resetOnNewDay","happyNotes","sadNotes","_this2","today","toISOString","substring","setItem","stringify","currentState","message","notification","setTimeout","close","bind","err","string","toLowerCase","includes","split","_value$split","_value$split2","slicedToArray","firstString","secondString","formattedTime","getTimeFromStrings","_this3","progressBarValue","progressBarClassName","react_default","a","createElement","className","type","checked","style","marginLeft","onChange","e","placeholder","step","max","min","event","target","marginRight","width","onKeyPress","key","onClick","marginBottom","marginTop","aria-valuenow","aria-valuemin","aria-valuemax","map","index","defaultValue","changeHappyNotes","changeSadNotes","keys","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1f6ec14f.chunk.js","sourcesContent":["export const convertHoursToHumanReadableFormatWithoutSeconds = hours => {\r\n  let minutes = parseInt((hours * 60) % 60);\r\n  hours = parseInt(~~hours);\r\n\r\n  return hours + \"h \" + minutes + \"m \";\r\n};\r\n","import React, { Component } from \"react\";\n\nimport { convertHoursToHumanReadableFormatWithoutSeconds } from \"./utils\";\n\nconst MILISECONDS_IN_HOUR = 360000;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sleepHours: Number(localStorage.getItem(\"sleepHours\")) || 6,\n      isHappyWithDay: JSON.parse(localStorage.getItem(\"isHappyWithDay\")) || false,\n      happyDaysDates: JSON.parse(localStorage.getItem(\"happyDaysDates\")) || {},\n      resetOnNewDay: JSON.parse(localStorage.getItem(\"resetOnNewDay\")) || false,\n      newActivityTime: \"\",\n      newActivityTimeString: \"0h 0m\",\n      newActivityDescription: \"\",\n      happyNotes: localStorage.getItem(\"happyNotes\") || \"\",\n      sadNotes: localStorage.getItem(\"sadNotes\") || \"\",\n      activities: JSON.parse(localStorage.getItem(\"activities\")) || [\n        {\n          id: 1,\n          description: \"Be happy\",\n          isDone: false,\n          time: 1.0,\n          timeString: convertHoursToHumanReadableFormatWithoutSeconds(1.0)\n        }\n      ]\n    };\n  }\n  componentDidMount() {\n    const today = new Date().toISOString().substring(0, 10);\n    if (this.state.resetOnNewDay && !JSON.parse(localStorage.getItem(\"happyDaysDates\"))[today]) {\n      this.setState({\n        isHappyWithDay: false,\n        happyNotes: \"\",\n        sadNotes: \"\",\n        activities: []\n      });\n      localStorage.setItem(\"activities\", []);\n      localStorage.setItem(\"happyNotes\", \"\");\n      localStorage.setItem(\"sadNotes\", \"\");\n      localStorage.setItem(\"isHappyWithDay\", false);\n    }\n    if (!JSON.parse(localStorage.getItem(\"happyDaysDates\"))[today]) {\n      this.setState({\n        isHappyWithDay: false\n      });\n      localStorage.setItem(\"isHappyWithDay\", false);\n    }\n    const that = this;\n    setInterval(() => {\n      localStorage.setItem(\"activities\", JSON.stringify(that.state.activities));\n      const currentState = JSON.parse(JSON.stringify(that.state));\n      delete currentState.happyDaysDates;\n      this.state.happyDaysDates[today] = currentState;\n      localStorage.setItem(\"happyDaysDates\", JSON.stringify(this.state.happyDaysDates));\n      this.setState({ happyDaysDates: this.state.happyDaysDates });\n    }, 1000);\n    this.handleNotifications();\n  }\n\n  deleteActivities = () => {\n    const confirmed = window.confirm(`Are you sure to delete activity?`);\n    if (confirmed) {\n      this.setState(prevState => ({\n        activities: []\n      }));\n    }\n  };\n\n  handleNotifications = () => {\n    if (!(\"Notification\" in window)) {\n      console.log(\"Notification API not supported!\");\n      return;\n    }\n\n    const that = this;\n\n    Notification.requestPermission(result => {\n      let displayMorningNotification = true;\n      let displayEveningNotification = true;\n      if (result === \"granted\") {\n        setInterval(() => {\n          const date = new Date();\n          if (date.getHours() === 0) {\n            displayMorningNotification = true;\n            displayEveningNotification = true;\n          }\n          if (date.getHours() === 8 && displayMorningNotification) {\n            that.nonPersistentNotification(\"Let's plan your day!\");\n            displayMorningNotification = false;\n          }\n          if (date.getHours() === 22 && displayEveningNotification) {\n            that.nonPersistentNotification(\"Let's sum up your day\");\n            displayEveningNotification = false;\n          }\n        }, MILISECONDS_IN_HOUR);\n      }\n      if (result === \"default\") {\n        return alert(\"If you want to get reminder notifications please enable notifications\");\n      }\n    });\n  };\n\n  nonPersistentNotification(message) {\n    if (!(\"Notification\" in window)) {\n      console.log(\"Notification API not supported!\");\n      return;\n    }\n\n    try {\n      const notification = new Notification(message);\n      setTimeout(notification.close.bind(notification), 5000);\n    } catch (err) {\n      console.log(\"Notification API error: \" + err);\n    }\n  }\n\n  addActivity = () => {\n    if (this.state.newActivityDescription.length === 0) {\n      return alert(\"Insert description first.\");\n    }\n    if (this.state.newActivityTime === 0) {\n      return alert(\"Insert time first in proper format.\");\n    }\n    if (this.getTimeAvailable() - this.state.newActivityTime < 0) {\n      return alert(\"You went over 24h time!\");\n    }\n    this.setState(prevState => ({\n      activities: [\n        ...prevState.activities,\n        {\n          id: prevState.activities.length,\n          description: prevState.newActivityDescription,\n          isDone: false,\n          time: this.state.newActivityTime,\n          timeString: convertHoursToHumanReadableFormatWithoutSeconds(this.state.newActivityTime)\n        }\n      ],\n      newActivityTimeString: \"0h 0m\",\n      newActivityDescription: \"\"\n    }));\n  };\n  deleteActivity = activity => {\n    const confirmed = window.confirm(`Are you sure to delete activity?`);\n    if (confirmed) {\n      this.setState(prevState => ({\n        activities: prevState.activities.filter(item => item.id !== activity.id)\n      }));\n    }\n  };\n\n  getActivitesTimeSum = () => {\n    if (this.state.activities.length === 0) {\n      return 0;\n    }\n    let hoursSum = 0;\n    this.state.activities.forEach(item => {\n      hoursSum += item.time;\n    });\n    return hoursSum;\n  };\n\n  getTimeAvailable = () => {\n    return 24 - this.state.sleepHours - this.getActivitesTimeSum();\n  };\n\n  getTimeUsed = () => {\n    return this.state.sleepHours + this.getActivitesTimeSum();\n  };\n\n  getProgressBarStatus = () => {\n    return ~~((this.getTimeUsed() / 24) * 100);\n  };\n\n  getTimeFromStrings(string, hours, minutes) {\n    if (string) {\n      string = string.toLowerCase();\n      if (string.includes(\"h\")) {\n        hours = Number(string.split(\"h\")[0]);\n      }\n      if (string.includes(\"m\")) {\n        minutes = Number(string.split(\"m\")[0]);\n      }\n    }\n    return { hours, minutes };\n  }\n\n  parseTimeStringToHourFloat(value) {\n    let [firstString, secondString] = value.split(\" \");\n    let hours = 0;\n    let minutes = 0;\n    let formattedTime = { hours: 0, minutes: 0 };\n    formattedTime = this.getTimeFromStrings(firstString, hours, minutes);\n    hours = formattedTime.hours;\n    minutes = formattedTime.minutes;\n    formattedTime = this.getTimeFromStrings(secondString, hours, minutes);\n    hours = formattedTime.hours;\n    minutes = formattedTime.minutes;\n    return hours + minutes / 60;\n  }\n\n  handleNewActivityTime = value => {\n    this.setState({ newActivityTimeString: value });\n    this.setState({ newActivityTime: this.parseTimeStringToHourFloat(value) });\n  };\n\n  changeHappyNotes(value) {\n    this.setState({ happyNotes: value });\n    localStorage.setItem(\"happyNotes\", value);\n  }\n\n  changeSadNotes(value) {\n    this.setState({ sadNotes: value });\n    localStorage.setItem(\"sadNotes\", value);\n  }\n\n  render() {\n    const progressBarValue = this.getProgressBarStatus();\n    const progressBarClassName =\n      progressBarValue < 80 ? \"light-blue\" : progressBarValue < 95 ? \"progress-bar-warning\" : \"progress-bar-danger\";\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-12 col-sm-12\">\n            <div className=\"col-md-8 col-sm-12\">\n              <header>\n                <h1>Manage your day</h1>\n                <div className=\"flex-container mg-bottom-5\">\n                  Clean activites and notes on start of new day?\n                  <input\n                    className=\"happy-day-checkbox\"\n                    type=\"checkbox\"\n                    checked={this.state.resetOnNewDay}\n                    style={{ marginLeft: 5 }}\n                    onChange={e => {\n                      if (this.state.resetOnNewDay) {\n                        this.setState({ resetOnNewDay: false });\n                        localStorage.setItem(\"resetOnNewDay\", false);\n                      } else {\n                        this.setState({ resetOnNewDay: true });\n                        localStorage.setItem(\"resetOnNewDay\", true);\n                      }\n                    }}\n                  />\n                </div>\n              </header>\n              <label>Your sleep hours</label>\n              <input\n                placeholder=\"Sleep hours\"\n                type=\"number\"\n                step={0.1}\n                max={24}\n                min={0}\n                className=\"form-control input-sm\"\n                value={this.state.sleepHours}\n                onChange={event => {\n                  this.setState({ sleepHours: Number(event.target.value) });\n                  localStorage.setItem(\"sleepHours\", Number(event.target.value));\n                }}\n              />\n              <label>Add new activity</label>\n              <div className=\"flex-container\">\n                <input\n                  placeholder=\"Time to spent (0h 0m)\"\n                  type=\"text\"\n                  className=\"form-control input-sm text-right\"\n                  value={this.state.newActivityTimeString}\n                  style={{ marginRight: 5, width: \"70px\" }}\n                  onChange={event => this.handleNewActivityTime(event.target.value)}\n                />\n\n                <input\n                  placeholder=\"Your activity description...\"\n                  className=\"form-control input-sm\"\n                  style={{ marginRight: 5 }}\n                  value={this.state.newActivityDescription}\n                  onChange={event => this.setState({ newActivityDescription: event.target.value })}\n                  onKeyPress={e => {\n                    if (e.key === \"Enter\") {\n                      this.addActivity();\n                    }\n                  }}\n                />\n                <button\n                  className=\"btn btn-sm dark-blue pull-right\"\n                  onClick={this.addActivity}\n                  style={{ marginLeft: 5, marginBottom: 10 }}\n                >\n                  Add activity\n                </button>\n              </div>\n              <p>Available hours to use: {convertHoursToHumanReadableFormatWithoutSeconds(this.getTimeAvailable())}</p>\n              <div\n                style={{\n                  width: \"100%\",\n                  marginTop: 10\n                }}\n                className=\"progress\"\n              >\n                <div\n                  className={`progress-bar ${progressBarClassName}`}\n                  aria-valuenow={progressBarValue}\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                  style={{\n                    width: `${progressBarValue}%`\n                  }}\n                >\n                  <span>{progressBarValue}% elapsed</span>\n                </div>\n              </div>\n              <div className=\"col-md-12 col-xs-12 no-pm\">\n                <h3 className=\"activities-title\">\n                  Activities ({this.state.activities.filter(item => item.isDone).length}/{this.state.activities.length})\n                </h3>\n                <button\n                  className=\"btn btn-sm btn-danger pull-right\"\n                  onClick={this.deleteActivities}\n                  style={{ marginLeft: 5, marginBottom: 10 }}\n                >\n                  Clear all activites\n                </button>\n              </div>\n              <ul className=\"list-group\">\n                {this.state.activities.map((item, index) => {\n                  return (\n                    <li key={index} className=\"list-group-item flex-container dark-bg\">\n                      <input\n                        className=\"activity-checkbox\"\n                        type=\"checkbox\"\n                        checked={item.isDone}\n                        style={{ marginRight: 5 }}\n                        onChange={e => {\n                          item.isDone = !item.isDone;\n                          this.setState({});\n                        }}\n                      />\n                      <input\n                        placeholder=\"Time\"\n                        className=\"form-control input-sm text-right\"\n                        value={item.timeString}\n                        style={{ marginRight: 5, width: \"70px\" }}\n                        onChange={e => {\n                          item.timeString = e.target.value;\n                          item.time = this.parseTimeStringToHourFloat(e.target.value);\n                          this.setState({});\n                        }}\n                      />\n                      <input\n                        placeholder=\"Description\"\n                        className=\"form-control input-sm\"\n                        defaultValue={item.description}\n                        style={{ marginRight: 5, width: \"100%\" }}\n                        onChange={e => {\n                          item.description = e.target.value;\n                          this.setState({});\n                        }}\n                      />\n                      <button className=\"btn btn-sm btn-danger pull-right\" onClick={() => this.deleteActivity(item)}>\n                        <i className=\"fa fa-trash\" />\n                      </button>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n            <div className=\"col-md-4 col-sm-12\">\n              <h3 className=\"notes-title\">Update these one at the end of your day to sum up your day</h3>\n              <div className=\"flex-container mg-bottom-5\">\n                Are you happy with your day?\n                <input\n                  className=\"happy-day-checkbox\"\n                  type=\"checkbox\"\n                  checked={this.state.isHappyWithDay}\n                  style={{ marginLeft: 5 }}\n                  onChange={e => {\n                    if (this.state.isHappyWithDay) {\n                      this.setState({ isHappyWithDay: false });\n                      localStorage.setItem(\"isHappyWithDay\", false);\n                    } else {\n                      this.setState({ isHappyWithDay: true });\n                      localStorage.setItem(\"isHappyWithDay\", true);\n                    }\n                  }}\n                />\n              </div>\n              <div>\n                <label>\n                  Happy notes <span className=\"fa fa-smile-beam\" /> (describe here things that happened and made you\n                  happy)\n                </label>\n                <textarea\n                  placeholder=\"Happy notes\"\n                  className=\"form-control input-sm\"\n                  value={this.state.happyNotes}\n                  onChange={event => this.changeHappyNotes(event.target.value)}\n                />\n              </div>\n              <div>\n                <label>\n                  Sadness notes <span className=\"fa fa-frown\" /> (describe here things that happened and made you\n                  sad/angry)\n                </label>\n                <textarea\n                  placeholder=\"Sad notes\"\n                  className=\"form-control input-sm\"\n                  value={this.state.sadNotes}\n                  onChange={event => this.changeSadNotes(event.target.value)}\n                />\n              </div>\n              <div className=\"col-md-12 col-sm-12\">\n                <h4>\n                  List of days you were happy - (if there are not too many - hey don't worry may you have just forgot to\n                  set a 'happy' checkbox <span className=\"fa fa-smile-beam\" /> )\n                </h4>\n                <div className=\"happy-days-container\">\n                  {Object.keys(this.state.happyDaysDates).map((key, index) => {\n                    if (this.state.happyDaysDates[key].isHappyWithDay) {\n                      return (\n                        <span key={index}>\n                          {index > 0 && \", \"}\n                          {key}\n                        </span>\n                      );\n                    }\n                    return null;\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.css\";\nimport \"./style.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}